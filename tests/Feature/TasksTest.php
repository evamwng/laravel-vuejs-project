<?php

namespace Tests\Feature;

use App\Models\Tasks;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class TasksTest extends TestCase
{
    use WithFaker, RefreshDatabase;

    public $data = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->data = [
            'name' => $this->faker->name,
            'description' => $this->faker->paragraph,
            'user_id' => \App\Models\User::factory(),
        ];
    }

    /** @test */
    public function test_user_can_read_daily_tasks()
    {
        $user = User::factory()->create();

        $task = Tasks::factory()->create();

        $data = [
            'type' => 'daily',
            'date' => $task->created_at
        ];

        $res = $this->actingAs($user)->json('POST', '/api/tasks/search', $data)->decodeResponseJson();
        dd($res);
    }

    /** @test */
    public function test_user_can_read_a_single_task()
    {
        $user = User::factory()->create();

        $task = Tasks::factory()->create();

        $this->actingAs($user, 'api')->json('GET', '/api/tasks/'.$task->id)
            ->assertJson([
                'name' => $task->name,
                'description' => $task->description
            ]);
    }
    /** @test */
    public function test_unauthenticated_users_cannot_create_a_task()
    {

        $task = Tasks::factory()->make();

        $this->json('POST', '/api/tasks', $task->toArray(), ['Accept' => 'application/json'])
            ->assertJson([
                'message' => "Unauthenticated.",
            ]);
    }

    /** @test */
    public function test_authenticated_users_can_create_a_tasks()
    {

        $user = User::factory()->create();

        $task = Tasks::factory()->make();

        $this->post('/api/tasks/store',$task->toArray());

        $this->actingAs($user, 'api')->json('POST', '/api/tasks',$task->toArray());

        $this->assertEquals(1,Tasks::all()->count());
    }

    /** @test */
    public function test_a_task_requires_a_title(){

        $user = User::factory()->create();

        $task = Tasks::factory()->make(['name' => null]);

        $this->actingAs($user, 'api')->json('POST', '/api/tasks',$task->toArray())
            ->assertSessionHasErrors('name');
    }

    /** @test */
    public function test_a_task_requires_a_description(){

        $user = User::factory()->create();

        $task = Tasks::factory()->make(['description' => null]);

        $this->actingAs($user, 'api')->json('POST', '/api/tasks',$task->toArray())
            ->assertSessionHasErrors('description');
    }

    /** @test */
    public function test_user_can_update_the_task(){

        $user = User::factory()->create();

        $task = Tasks::factory()->create(['user_id' => Auth::id()]);

        $task->title = "Updated Title";

        $this->actingAs($user, 'api')->json('PUT', '/api/tasks/'.$task->id, $task->toArray());

        $this->assertDatabaseHas('tasks',['id'=> $task->id , 'name' => 'Updated Title']);

    }
    /** @test */
    public function test_user_can_delete_the_task(){

        $user = User::factory()->create();

        $task = Tasks::factory()->create(['user_id' => Auth::id()]);

        $this->delete('/api/tasks/'.$task->id);
        $this->actingAs($user, 'api')->json('DELETE', '/api/tasks/'.$task->id);

        $this->assertDatabaseMissing('tasks',['id'=> $task->id]);

    }
}
