<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Routing\Route;
use Tests\TestCase;

class UserAuthenticationTest extends TestCase
{
    use WithFaker, RefreshDatabase;

    public $data = null;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->data = [
            'name' => $this->faker->name,
            'email' => $this->faker->unique()->safeEmail,
            'password' => $this->faker->password, // password
        ];
    }

    public function testRequiredFieldsForRegistration()
    {
        $this->json('POST', 'api/register', ['Accept' => 'application/json'])
            ->assertStatus(422)
            ->assertJson([
                "message" => "The given data was invalid.",
                "errors" => [
                    "name" => ["The name field is required."],
                    "email" => ["The email field is required."],
                    "password" => ["The password field is required."],
                ]
            ]);
    }

    public function testRepeatPassword()
    {
        $userData = [
            "name" => "John Doe",
            "email" => "doe@example.com",
            "password" => "demo12345"
        ];

        $this->json('POST', 'api/register', $userData, ['Accept' => 'application/json'])
            ->assertStatus(422)
            ->assertJson([
                "message" => "The given data was invalid.",
                "errors" => [
                    "password" => ["The password confirmation does not match."]
                ]
            ]);
    }

    /**
     * Test user registration
     *
     * @return void
     */
    public function testUserCanRegister()
    {
        $userData = [
            "name" => "John Doe",
            "email" => "doe@example.com",
            "password" => "demo12345",
            "password_confirmation" => "demo12345"
        ];

        $this->json('POST', 'api/register', $userData, ['Accept' => 'application/json'])
            ->assertStatus(200)
            ->assertJsonStructure([
                "access_token",
                "token_type"
            ]);
    }

    /**
     * Test user registration
     *
     * @return void
     */
    public function testUserCanLogin()
    {
        $userData = [
            "name" => "John Doe",
            "email" => "doe@example.com",
            "password" => "demo12345",
            "password_confirmation" => "demo12345"
        ];

        $this->json('POST', 'api/register', $userData, ['Accept' => 'application/json'])
            ->assertStatus(200)
            ->assertJsonStructure([
                "access_token",
                "token_type"
            ]);
    }
    /**
     * Test user registration
     *
     * @return void
     */
    public function testUserCanRegisterViaSocialite()
    {
        $userData = [
            "email" => "doe@example.com",
        ];

        $response = $this->followingRedirects()
            ->json('GET', 'api/socialite/google', ['Accept' => 'application/json'])
            ->assertStatus(200);
    }
    /**
     * Test user registration
     *
     * @return void
     */
    public function testUserCanLoginViaSocialite()
    {
        $userData = [
            "email" => "doe@example.com",
        ];
        $result = $this->json('GET', 'api/socialite/google', ['Accept' => 'application/json'])->decodeResponseJson();

        $response = $this->followingRedirects()
            ->json('GET', $result['redirectUrl'], ['Accept' => 'application/json'])
            ->assertStatus(200);
    }
}
